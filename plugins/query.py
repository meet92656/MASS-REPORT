import json
import os
from pathlib import Path
import re
import shutil
import subprocess
import sys
import time
import psutil
from pyrogram import Client, filters
from pyrogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from info import Config, Txt

config_path = Path("config.json")


def humanbytes(size):
    if not size:
        return ""
    power = 2**10
    n = 0
    Dic_powerN = {0: ' ', 1: 'K', 2: 'M', 3: 'G', 4: 'T'}
    while size > power:
        size /= power
        n += 1
    return str(round(size, 2)) + " " + Dic_powerN[n] + ' ô'


@Client.on_callback_query()
async def handle_Query(bot: Client, query: CallbackQuery):

    data = query.data

    if data == "help":

        HelpBtn = [
            [InlineKeyboardButton(text='T·¥Ä Ä…¢·¥á·¥õ üéØ', callback_data='targetchnl'), InlineKeyboardButton
                (text='D·¥á ü·¥á·¥õ·¥á C·¥è…¥“ì…™…¢ ‚ùå', callback_data='delete_conf')],
            [InlineKeyboardButton(text='T…¢ A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õs üë•', callback_data='account_config'),
             InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='home')]
        ]

        await query.message.edit(text=Txt.HELP_MSG, reply_markup=InlineKeyboardMarkup(HelpBtn))

    elif data == "server":
        try:
            msg = await query.message.edit(text="__Processing...__")
            currentTime = time.strftime("%Hh%Mm%Ss", time.gmtime(
                time.time() - Config.BOT_START_TIME))
            total, used, free = shutil.disk_usage(".")
            total = humanbytes(total)
            used = humanbytes(used)
            free = humanbytes(free)
            cpu_usage = psutil.cpu_percent()
            ram_usage = psutil.virtual_memory().percent
            disk_usage = psutil.disk_usage('/').percent
            ms_g = f"""<b><u>B·¥è·¥õ S·¥õ·¥Ä·¥õ·¥ús</b></u>

**‚ùç U·¥ò·¥õ…™·¥ç·¥á :** <code>{currentTime}</code>
**‚ùç C·¥ò·¥ú Us·¥Ä…¢·¥á :** <code>{cpu_usage}%</code>
**‚ùç R·¥Ä·¥ç Us·¥Ä…¢·¥á :** <code>{ram_usage}%</code>
**‚ùç T·¥è·¥õ·¥Ä ü D…™s·¥ã S·¥ò·¥Ä·¥Ñ·¥á :** <code>{total}</code>
**‚ùç Us·¥á·¥Ö S·¥ò·¥Ä·¥Ñ·¥á :** <code>{used} ({disk_usage}%)</code>
**‚ùç F Ä·¥á·¥á S·¥ò·¥Ä·¥Ñ·¥á :** <code>{free}</code> """

            await msg.edit_text(text=ms_g, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='home')]]))
        except Exception as e:
            print('Error on line {}'.format(
                sys.exc_info()[-1].tb_lineno), type(e).__name__, e)

    elif data == "about":
        botuser = await bot.get_me()
        await query.message.edit(text=Txt.ABOUT_MSG.format(botuser.username, botuser.username), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='home')]]))

    elif data == "home":
        Btn = [
            [InlineKeyboardButton(text='‚õëÔ∏è ùñß·¥á ü·¥ò üöÅ', callback_data='help'), InlineKeyboardButton(
                text='üåÄ ùñ°·¥è·¥õ s·¥õ·¥Ä·¥õ·¥ús ‚ú≥Ô∏è', callback_data='server')],
            [InlineKeyboardButton(text='üì∞ ùñ¥·¥ò·¥Ö·¥Ä·¥õ·¥ás üóûÔ∏è', url='https://t.me/PURVI_SUPPORT'),
             InlineKeyboardButton(text='ü§ñ ùñ°·¥è·¥õ ùñ®…¥“ì·¥è ‚ÑπÔ∏è', callback_data='about')],
            [InlineKeyboardButton(text='üßë‚Äçüíª ùñÆ·¥°…¥·¥á Ä ‚å®Ô∏è',
                                  url='https://t.me/ll_ALPHA_BABY_lll')]
        ]

        await query.message.edit(text=Txt.START_MSG.format(query.from_user.mention), reply_markup=InlineKeyboardMarkup(Btn))

    elif data == "delete_conf":

        if query.from_user.id != Config.OWNER:
            return await query.message.edit("**You're Not Admin To Perform this task ‚ùå**", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='help')]]))
            
        btn = [
            [InlineKeyboardButton(text='Y·¥ás', callback_data='delconfig-yes')],
            [InlineKeyboardButton(text='N·¥è', callback_data='delconfig-no')]
        ]

        await query.message.edit(text="**‚ö†Ô∏è A Ä·¥á  è·¥è·¥ú S·¥ú Ä·¥á ?**\n\nY·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú·¥á ·¥Ñ·¥è…¥“ì…™…¢.", reply_markup=InlineKeyboardMarkup(btn))

    elif data == "targetchnl":

        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as file:
                config = json.load(file)

        else:
            return await query.message.edit(text="Y·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥ç·¥Ä·¥ã…™…¥…¢ ·¥Ä ·¥Ñ·¥è…¥“ì…™…¢  è·¥á·¥õ !\n\n “ì…™ Äs·¥õ ü è ·¥ç·¥Ä·¥ã·¥á ·¥Ñ·¥è…¥“ì…™…¢  ô è ·¥ús…™…¥…¢ /make_config", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='help')]]))

        Info = await bot.get_chat(config['Target'])

        btn = [
            [InlineKeyboardButton(text='C ú·¥Ä…¥…¢·¥á T·¥Ä Ä…¢·¥á·¥õ',
                                  callback_data='chgtarget')],
            [InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='help')]
        ]

        text = f"C ú·¥Ä…¥…¥·¥á ü N·¥Ä·¥ç·¥á :- <code> {Info.title} </code>\nC ú·¥Ä…¥…¥·¥á ü Us·¥á Ä…¥·¥Ä·¥ç·¥á :- <code> @{Info.username} </code>\nChannel Chat Id :- <code> {Info.id} </code>"

        await query.message.edit(text=text, reply_markup=InlineKeyboardMarkup(btn))

    elif data == "chgtarget":

        try:
            with open(config_path, 'r', encoding='utf-8') as file:
                config = json.load(file)

            try:
                target = await bot.ask(text=Txt.SEND_TARGET_CHANNEL, chat_id=query.message.chat.id, filters=filters.text, timeout=60)
            except:

                await bot.send_message(query.from_user.id, "E Ä Ä·¥è Ä..!!\n\nR·¥á«´·¥ú·¥ás·¥õ ·¥õ…™·¥ç·¥á·¥Ö ·¥è·¥ú·¥õ.\nR·¥ás·¥õ·¥Ä Ä·¥õ  ô è ·¥ús…™…¥…¢ /target", reply_to_message_id=target.id)
                return

            ms = await query.message.reply_text("**P ü·¥á·¥Äs·¥á W·¥Ä…™·¥õ...**", reply_to_message_id=query.message.id)

            group_target_id = target.text
            gi = re.sub("(@)|(https://)|(http://)|(t.me/)",
                        "", group_target_id)

            for account in config['accounts']:
                # Run a shell command and capture its output
                try:

                    process = subprocess.Popen(
                        ["python", f"login.py", f"{gi}",
                            f"{account['Session_String']}"],
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                    )
                except Exception as err:
                    await bot.send_message(msg.chat.id, text=f"<b>ERROR :</b>\n<pre>{err}</pre>")

                # Use communicate() to interact with the process
                stdout, stderr = process.communicate()

                # Get the return code
                return_code = process.wait()

                # Check the return code to see if the command was successful
                if return_code == 0:
                    # Print the output of the command
                    print("Command output:")
                    # Assuming output is a bytes object
                    output_bytes = stdout
                    # Decode bytes to string and replace "\r\n" with newlines
                    output_string = output_bytes.decode(
                        'utf-8').replace('\r\n', '\n')
                    print(output_string)

                else:
                    # Print the error message if the command failed
                    print("Command failed with error:")
                    print(stderr)
                    return await query.message.edit('**S·¥è·¥ç·¥á·¥õ ú…™…¥…¢ ·¥°·¥á…¥·¥õ ·¥° Ä·¥è…¥…¢ ·¥ã…™…¥·¥Ö ü è ·¥Ñ ú·¥á·¥Ä·¥ã  è·¥è·¥ú Ä I…¥·¥ò·¥ú·¥õs ·¥° ú·¥á·¥õ ú·¥á Ä  è·¥è·¥ú  ú·¥Ä·¥†·¥á “ì…™ ü ü·¥á·¥Ö C·¥è Ä Ä·¥á·¥Ñ·¥õ ü è ·¥è Ä …¥·¥è·¥õ !!**')

            newConfig = {
                "Target": gi,
                "accounts": config['accounts']
            }

            with open(config_path, 'w', encoding='utf-8') as file:
                json.dump(newConfig, file, indent=4)

            await ms.edit("**T·¥Ä Ä…¢·¥á·¥õ U·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ‚úÖ**\n\nUs·¥á /target ·¥õ·¥è ·¥Ñ ú·¥á·¥Ä·¥ã  è·¥è·¥ú Ä ·¥õ·¥Ä Ä…¢·¥á·¥õ")
        except Exception as e:
            print('Error on line {}'.format(
                sys.exc_info()[-1].tb_lineno), type(e).__name__, e)

    elif data.startswith('delconfig'):
        condition = data.split('-')[1]
        try:
            if condition == 'yes':
                os.remove('config.json')
                await query.message.edit("**S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è D·¥á ü·¥á·¥õ·¥á·¥Ö ‚úÖ**")
            else:
                await query.message.edit("**Y·¥è·¥ú C·¥Ä…¥·¥Ñ·¥á ü·¥á·¥Ö T ú·¥á P Ä·¥è·¥Ñ·¥áss ‚ùå**")
        except Exception as e:
            await query.message.edit(f"{e}\n\n E Ä Ä·¥è Ä...üòµ")

    elif data == "account_config":

        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as file:
                config = json.load(file)

        else:
            return await query.message.edit(text="Y·¥è·¥ú ·¥Ö…™·¥Ö…¥'·¥õ ·¥ç·¥Ä·¥ã·¥á ·¥Ä ·¥Ñ·¥è…¥“ì…™…¢  è·¥á·¥õ !\n\n F…™ Äs·¥õ ü è ·¥ç·¥Ä·¥ã·¥á ·¥Ñ·¥è…¥“ì…™…¢  ô è ·¥ús…™…¥…¢ /make_config", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='help')]]))

        with open(config_path, 'r', encoding='utf-8') as file:
            config = json.load(file)

        UserInfo = []
        for account in config["accounts"]:
            OwnerUid = account["OwnerUid"]
            OwnerName = account['OwnerName']
            UserInfo.append([InlineKeyboardButton(
                text=f"{OwnerName}", callback_data=f"{OwnerUid}")])

        UserInfo.append([InlineKeyboardButton(
            text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='help')])

        await query.message.edit(text="**T ú·¥á T·¥á ü·¥á…¢ Ä·¥Ä·¥ç A·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ Y·¥è·¥ú  ú·¥Ä·¥†·¥á A·¥Ö·¥Ö·¥á·¥Ö üëá**", reply_markup=InlineKeyboardMarkup(UserInfo))

    elif int(data) in [userId['OwnerUid'] for userId in (json.load(open("config.json")))['accounts']]:
        accountData = {}
        for account in (json.load(open("config.json")))['accounts']:
            if int(data) == account["OwnerUid"]:
                accountData.update({'Name': account['OwnerName']})
                accountData.update({'UserId': account['OwnerUid']})

        await query.message.edit(text=Txt.ACCOUNT_INFO.format(accountData.get('Name'), accountData.get('UserId')), reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton(text='‚ü∏ B·¥Ä·¥Ñ·¥ã', callback_data='help')]]))
        accountData = {}
